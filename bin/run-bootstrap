#!/bin/bash

set -e

echo "* Updating self"
cd ${HOME}/.dotfiles && git pull origin master
cd - 2>/dev/null

echo "* Updating the system"
sudo apt update --list-cleanup
sudo apt install --purge \
  bat \
  fonts-inconsolata \
  fonts-open-sans \
  fonts-wine \
  fzf \
  jq \
  pre-commit \
  python3-neovim \
  ripgrep \
  vim-gtk3 \
  watchman \
  zsh \
  zsh-antigen
sudo apt dist-upgrade --purge
sudo flatpak update
sudo flatpak uninstall --unused
sudo apt autoremove --purge
sudo apt clean

echo "* Updating symlinks"
SOURCE_DIR="${HOME}/.dotfiles"
LINKS="
.bash_logout \
.bashrc \
.config/nvim/ginit.vim \
.config/nvim/init.vim \
.gitattributes \
.gitconfig \
.gitignore \
.p10k.zsh \
.profile \
.sharedrc \
.vimrc \
.xprofile \
.zshrc"
for FILE in $LINKS; do
    SOURCE_FILE=$SOURCE_DIR/`echo $FILE | sed -e 's/^\./dot\./g'`
    DEST_FILE=${HOME}/$FILE

    if [ ! -f "$SOURCE_FILE" -a ! -d "$SOURCE_FILE" ]; then
        echo "$SOURCE_FILE is missing!"
        exit 1
    fi

    if [ ! "`readlink -f $DEST_FILE`" = "$SOURCE_FILE" ]; then
        echo "* Updating symlink for $DEST_FILE"
        ln -f -s $SOURCE_FILE $DEST_FILE
    fi
done

echo "* Installing local"
mkdir -p ~/.local/bin
NVIM_F=~/.local/bin/nvim
NVIM_TMP=$(mktemp)
curl -L -o ${NVIM_TMP} https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
chmod +x ${NVIM_TMP}
if [ -f ${NVIM_F} ]; then
  OLD_MD5=$(md5sum "${NVIM_F}" | cut -d ' ' -f 1)
  NEW_MD5=$(md5sum "${NVIM_TMP}" | cut -d ' ' -f 1)
  if [ ${OLD_MD5} != ${NEW_MD5} ]; then
    NVIM_TMP2=$(mktemp)
    mv ${NVIM_F} ${NVIM_TMP2}
  fi
else
  mv ${NVIM_TMP} ${NVIM_F}
fi
LOCAL_BUILD_DIR=~/.local_build
mkdir -p ${LOCAL_BUILD_DIR}
if [ ! -d "${LOCAL_BUILD_DIR}/neovim-gtk" ]; then
  git clone https://github.com/daa84/neovim-gtk ${LOCAL_BUILD_DIR}/neovim-gtk
fi
cd ${LOCAL_BUILD_DIR}/neovim-gtk
git pull origin master
make PREFIX=~/.local install
cd -

echo "* Installing vim-plug"
if [ ! -f "${HOME}/.vim/autoload/plug.vim" ]; then
  mkdir -p ~/.vim
  mkdir -p ~/.vim/autoload
  curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
fi

echo "* Installing vim spell files"
if [ ! -d "${HOME}/.vim/spell" ]; then
  mkdir -p ~/.vim/spell
  cd ~/.vim/spell &&
  wget -N -nv ftp://ftp.vim.org/pub/vim/runtime/spell/en.* --timeout=5 && \
  wget -N -nv ftp://ftp.vim.org/pub/vim/runtime/spell/pt.* --timeout=5 && \
  cd - 2>/dev/null
fi

echo "* Installing poetry"
if [ ! -f "${HOME}/.poetry/bin/poetry" ]; then
  curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3 -
fi

echo "* Updating zsh"
zsh -i -c "antigen cleanup"
zsh -i -c "antigen update"

echo "* Updating poetry"
poetry self update
poetry config virtualenvs.create true
poetry config virtualenvs.in-project true

echo "* Updating nvm"
zsh -i -c "nvm upgrade"

echo "* Updating node"
NODE_INSTALLED=`npm list -g --depth=0 --parseable | sort | grep node_modules | grep -v npm | rev | cut -d'/' -f1 | rev`
NODE_PACKAGES="
create-react-native-app \
expo-cli \
gulp-cli \
localtunnel \
npm \
opencollective \
patch-package \
prettier \
pyright \
react-native-cli \
rimraf \
yarn"

for P in $NODE_PACKAGES; do
  if [ "${P}" = "npm" ]; then
    continue
  fi
  if [[ "$NODE_INSTALLED" != *"$P"* ]]; then
    echo "${P} is missing. Installing it."
    npm -g i $P
  fi
done
for I in $NODE_INSTALLED; do
  if [[ "$NODE_PACKAGES" != *"$I"* ]]; then
    echo "${P} should not be installed. Uninstalling it."
    npm -g uninstall $I
  fi
done
npm update -g

echo "* Updating vim plugins"
${NVIM_F} +PlugUpgrade +qall
${NVIM_F} +PlugClean! +qall
${NVIM_F} +PlugUpdate! +qall
${NVIM_F} +"TSInstallSync! bash" +qall
${NVIM_F} +"TSInstallSync! c" +qall
${NVIM_F} +"TSInstallSync! graphql" +qall
${NVIM_F} +"TSInstallSync! javascript" +qall
${NVIM_F} +"TSInstallSync! python" +qall
${NVIM_F} +"TSInstallSync! scss" +qall
${NVIM_F} +"TSInstallSync! toml" +qall
${NVIM_F} +"TSInstallSync! typescript" +qall
${NVIM_F} +"TSInstallSync! yaml" +qall
${NVIM_F} +"TSUpdate! all" +qall
